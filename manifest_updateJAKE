# Author: Jared Crouse
# Organization: Colorado State University
# Creation Date: 4-30-2021
# Last Updated: 5-04-2021
#
# Description:
# This script was created to update the manifest file for the C/C++ Juliet test
# suite with absolute paths. It also adds details to the manifest about the target
# CWE, flow variant and test case number with the <info> tag. The optional verbose
# flag can be used to ouput this information to the terminal.
#
# Usage: 
#	On Mac or Linux:
# 		python3 manifest_update.py <full_path_to_manifest.xml>
#
# 	With verbose option: (outputs info to terminal)
# 		python3 manifest_update.py <full_path_to_manifest.xml> -v
# 


import argparse
import os
import sys
import glob


def main():
	'''
	This is the main method of the script, it parses the arguments, scans the
	manifest from the test directory, creates a new manifest file with absolute
	file paths, adds details about test cases and outputs those details to the
	terminal if ther verbose option is used. It also deletes the old manifest 
	file from the test directory. See other methods for more details.
	'''
	manifest_path, verbose = parser()
	split_path = manifest_path.split('.')
	manifest_renamed = split_path[0] + '_old.xml'
	os.rename(manifest_path, manifest_renamed)

	# The man_info dictionary is formatted as follows:
	# {'CWE': [case_count, {'variant': variant_count}]}
	# The CWE and variant keys are both strings
	# case_count and variant_count are both integers (and both start counting at 1)
	man_info = {}

	with open(manifest_renamed) as old_man:
		new_man = open(manifest_path, 'w')

		man_iter = enumerate(old_man, 0)
		for num, line in man_iter:
			# Update testcase with absolute file path and <info> tag
			if '  <testcase>' in line:
				test_lines = []
				cwe = []
				var = []

				# Add lines as list items until </testcase> found
				while True:
					line_tuple = man_iter.__next__()
					if '  </testcase>' in line_tuple[1]:
						break
					else:
						test_lines.append(line_tuple[1])

				need_info = True
				for idx in range(len(test_lines)):
					# Update list with absolute file paths
					if '    <file' in test_lines[idx]:
						parts = test_lines[idx].split('\"')
						simple_cwe_parts = parts[1].split('_')
						simple_cwe = simple_cwe_parts[0]

						dir_to_search = manifest_path.split('manifest.xml')
						specific_dir = glob.glob(dir_to_search[0] + 'testcases/' + simple_cwe + '*')

						# Special condition for CWE36 and CWE78 because of a conflict with other dirs that start with same prefix
						dir_index = 0
						if 'CWE36' == simple_cwe:
							for dir_idx in range(len(specific_dir)):
								if "CWE36_" in specific_dir[dir_idx]:
									dir_index = dir_idx
						elif 'CWE78' == simple_cwe:
							for dir_idx in range(len(specific_dir)):
								if "CWE78_" in specific_dir[dir_idx]:
									dir_index = dir_idx

						abs_test_file = glob.glob(specific_dir[dir_index] + '/**/' + parts[1], recursive = True)

						dont_count = False
						try:
							new_list_item = parts[0] + '\"' + abs_test_file[0] + '\"' + parts[2]
							test_lines[idx] = new_list_item
						except:
							print('Failed to locate ' + parts[1])
							test_lines[idx] = parts[0] + '\"NULL\"' + parts[2]
							dont_count = True

						# Get CWE, variant and add or update man_info dict
						if need_info:
							cwe_parts = parts[1].split('_')
							test_cwe = int(cwe_parts[0][3:len(cwe_parts)])
							if len(str(test_cwe)) == 2:
								cwe.append('0' + str(test_cwe))
							else:
								cwe.append(str(test_cwe))

							var_parts = cwe_parts[len(cwe_parts) - 1]
							try:
								try_var = int(cwe_parts[len(cwe_parts) - 1][:2])
								if len(str(try_var)) == 1:
									var.append('0' + str(try_var))
								else:
									var.append(str(try_var))
							except:
								xpt_var = int(cwe_parts[len(cwe_parts) - 2][:2])
								if len(str(xpt_var)) == 1:
									var.append('0' + str(xpt_var))
								else:
									var.append(str(xpt_var))

							if cwe[0] not in man_info:
								if dont_count:
									man_info[cwe[0]] = [0, {var[0]: 0}]
								else:
									man_info[cwe[0]] = [1, {var[0]: 1}]
								if verbose:
									print('Processing CWE ' + cwe[0])
							else:
								if not dont_count:
									man_info[cwe[0]][0] += 1
								if var[0] not in man_info[cwe[0]][1]:
									if not dont_count:
										man_info[cwe[0]][1][var[0]] = 1
								else:
									if not dont_count:
										man_info[cwe[0]][1][var[0]] += 1

							need_info = False

				# Write updated testcase to new manifest file
				new_man.write(line)
				new_man.write('    <info cwe=\"' + cwe[0] + '\" ' + 'variant=\"' + var[0] + '\" case=\"' + str(man_info[cwe[0]][0]) + '\">\n')

				for tl in test_lines:
					new_man.write(tl)

				new_man.write('  </testcase>\n')

			# Write all "non-testcase" lines without any changes
			else:
				# Add support files absolute paths at top of manifest
				if '<container>' in line:
					main_dir_parts = manifest_path.split('manifest.xml')
					file1 = main_dir_parts[0] + 'testcasesupport/io.c'
					file2 = main_dir_parts[0] + 'testcasesupport/std_testcase_io.h'
					file3 = main_dir_parts[0] + 'testcasesupport/std_testcase.h'
					file4 = main_dir_parts[0] + 'testcasesupport/std_thread.c'
					file5 = main_dir_parts[0] + 'testcasesupport/std_thread.h'
					new_man.write(line)
					new_man.write('  <testcasesupport>\n')
					new_man.write('    <file path=\"' + file1 + '\">\n')
					new_man.write('    <file path=\"' + file2 + '\">\n')
					new_man.write('    <file path=\"' + file3 + '\">\n')
					new_man.write('    <file path=\"' + file4 + '\">\n')
					new_man.write('    <file path=\"' + file5 + '\">\n')
					new_man.write('    </file>\n')
					new_man.write('  </testcasesupport>\n')
				else:
					new_man.write(line)

		new_man.close()

		if verbose:
			# Print CWEs in order with total test case count
			print('\n\nTotal Test Case CWE Entries')
			for i in sorted(man_info.keys()):
				print('CWE-' + i + ' : ' + str(man_info[i][0]))
			print('\n')

			# Print flow variants in order with total count
			flow_variants = {'01' : 0, '02' : 0, '03' : 0, '04' : 0, '05' : 0, '06' : 0, '07' : 0, '08' : 0, '09' : 0,
							'10' : 0, '11' : 0, '12' : 0, '13' : 0, '14' : 0, '15' : 0, '16' : 0, '17' : 0, '18' : 0,
							'21' : 0, '22' : 0,
							'31' : 0, '32' : 0, '33' : 0, '34' : 0,
							'41' : 0, '42' : 0, '43' : 0, '44' : 0, '45' : 0,
							'51' : 0, '52' : 0, '53' : 0, '54' : 0,
							'61' : 0, '62' : 0, '63' : 0, '64' : 0, '65' : 0, '66' : 0, '67' : 0, '68' : 0,
							'72' : 0, '73' : 0, '74' : 0,
							'81' : 0, '82' : 0, '83' : 0, '84' : 0}
			print('Total Test Case Flow Variant Entries')
			for k in man_info.keys():
				for fv in flow_variants.keys():
					try:
						flow_variants[fv] += man_info[k][1][fv]
					except:
						...
			for j in sorted(flow_variants.keys()):
				print('Flow variant ' + j + ' : ' + str(flow_variants[j]))
			print('\n')

			# Print each CWE (in order) with flow variants (in order) and the per cwe variant count for each
			print('Per CWE Flow Variant Entries')
			for l in sorted(man_info.keys()):
				print('CWE-' + l)
				for m in sorted(man_info[l][1].keys()):
					print('\tFlow variant ' + m + ' : ' + str(man_info[l][1][m]))
			print('\n')

	# Delete old manifest file
	os.remove(manifest_renamed)


def parser():
	'''
	This method parses the arguments passed by the user, ensures the manifest 
	file exists and returns the file path and verbose flag.
	'''
	parser = argparse.ArgumentParser(description='Update the manifest.xml file with absolute paths and add test details')
	parser.add_argument('Path', metavar='path', type=str, help='Path to manifest.xml')
	parser.add_argument('-v', '--verbose', required=False, default=False, help='Verbose flag', action='store_true')

	args = parser.parse_args()
	input_path = args.Path
	verbose = args.verbose

	if not os.path.isfile(input_path):
	    print('The file specified does not exist!')
	    sys.exit()

	return input_path, verbose


if __name__ == "__main__":
	main()
